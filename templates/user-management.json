{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Create Cognito based user management resources",
    "Parameters": {
        "HostingBucket": {
            "Type": "String"
        },
        "LambdaS3ExecutionRoleArn": {
            "Type": "String"
        }                     
    },
    "Resources": { 
        "SageServerUserPool": {
            "Type" : "AWS::Cognito::UserPool",
            "Properties" : {
                "UsernameAttributes" : ["email"],
                "UserPoolName" : "SageServerUserPool"
            }
        },
        "SageServerAppClient" : {
            "Type" : "AWS::Cognito::UserPoolClient",
            "DependsOn": [
                "SageServerUserPool"
            ],             
            "Properties" : {
                "ClientName" : "SageServerAppClient",
                "GenerateSecret" : false,
                "UserPoolId" : {"Ref": "SageServerUserPool"}
            }
        },
        "UpdateJavascriptConfigWithCognitoFunction": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "SageServerAppClient",
            "Properties": {
                "Description" : "Adds User Pool information to the config.js file",
                "Handler": "index.handler",
                "Role": {"Ref" : "LambdaS3ExecutionRoleArn"},
                "Code": {
                    "ZipFile" : { "Fn::Join" : ["\n", [
                        "import json",
                        "import boto3",
                        "import cfnresponse",
                        "s3 = boto3.resource('s3')",
                        "def create(properties, physical_id):",
                        "    userPoolId = properties['UserPool']",
                        "    clientId = properties['Client']",
                        "    region = properties['Region']",
                        "    bucket = properties['Bucket']",
                        "    config_content = '''",
                        "    var _config = {",
                        "    cognito: {",
                        "        userPoolId: '%s',",
                        "        userPoolClientId: '%s',",
                        "        region: '%s',",
                        "    },",
                        "    api: {",
                        "        invokeUrl: 'Base URL of your API including the stage',",
                        "    }",
                        "};",
                        "'''",    
                        "    config_content = config_content % (userPoolId, clientId, region)",
                        "    config = s3.Object(bucket,'js/config.js')",
                        "    config.put(Body=config_content)",
                        "    return cfnresponse.SUCCESS, None",
                        "def update(properties, physical_id):",
                        "    return create(properties, physical_id)",
                        "def delete(properties, physical_id):",
                        "    return cfnresponse.SUCCESS, physical_id",
                        "def handler(event, context):",
                        "    print('Received event: ' + json.dumps(event))",
                        "    status = cfnresponse.FAILED",
                        "    new_physical_id = None",
                        "    try:",
                        "        properties = event.get('ResourceProperties')",
                        "        physical_id = event.get('PhysicalResourceId')",
                        "        status, new_physical_id = {",
                        "            'Create': create,",
                        "            'Update': update,",
                        "            'Delete': delete",
                        "        }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)",
                        "    except Exception as e:",
                        "        print('Exception: ' + e)",
                        "        status = cfnresponse.FAILED",
                        "    finally:",
                        "        cfnresponse.send(event, context, status, {}, new_physical_id)"
                    ]]}
                },
                "Runtime": "python3.6",
                "Timeout": "30",
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "UpdateJavascriptConfigWithCognitoCustom": {
            "Type": "Custom::ConfigFile",
            "DependsOn": [
                "SageServerUserPool",
                "SageServerAppClient",
                "UpdateJavascriptConfigWithCognitoFunction"
            ],
            "Properties": {
                "ServiceToken": { "Fn::GetAtt" : ["UpdateJavascriptConfigWithCognitoFunction", "Arn"] },
                "UserPool": {"Ref" : "SageServerUserPool"},
                "Client": {"Ref" : "SageServerAppClient"},
                "Region": {"Ref" : "AWS::Region"},
                "Bucket": {"Ref" : "HostingBucket"}
            }
        }        
    },
    "Outputs": {
        "SageServerUserPoolId": {
            "Value": {"Ref": "SageServerUserPool"},
            "Description": "Cognito User Pool Id"
        },
        "SageServerUserPoolARN": {
            "Value": { "Fn::GetAtt" : ["SageServerUserPool", "Arn"] },
            "Description": "Cognito User Pool Id"
        },        
        "SageServerAppClient": {
            "Value": {"Ref": "SageServerAppClient"},
            "Description": "App Client Id for Cognito User Pool"
        }                 
    }    
}